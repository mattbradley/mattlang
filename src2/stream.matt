type Stream<E> = () -> (E, Stream<E>) | Stream.Done

module Stream
  type Done

  fn run<E>(enum: Enumerable<E>) -> Nil
    Enum.reduce(enum, nil) { _, _ -> nil }
  end

  fn unfold<E, A>(next_acc: A, next_fn: A -> (E, A) | Nil) -> Stream<E>
    Stream {
      case next_fn(next_acc)
        nil               -> Done
        (value, next_acc) -> (value, unfold(next_acc, next_fn))
      end
    }
  end

  fn iterate<E>(start: E, next: E -> E) -> Stream<E>
    unfold((false, start)) { acc ->
      (started, prev_value) = acc

      if started
        next_value = next(prev_value)
        (next_value, (true, next_value))
      else
        (prev_value, (true, prev_value))
      end
    }
  end

  fn cycle<E>(enum: Enumerable<E>) -> Stream<E>
    result = Enumerable.reduce(enum, Enum.Step.Suspend(Enum.None)) { acc, x -> Enum.Step.Suspend(x) }

    case result
      Suspended(_, continuation) -> _cycle(enum, continuation)
      _ -> panic!("Expected a continuation")
    end
  end

  fn _cycle<E>(enum: Enumerable<E>, continuation: Enum.Step<E | Enum.None> -> Enum.Outcome<E | Enum.None>) -> Stream<E>
    Stream {
      (element, next_stream) = case continuation(Enum.Step.Continue(Enum.None))
        Suspended(element, next_continuation) ->
          (element, _cycle(enum, next_continuation))

        Halted(element) ->
          (element, cycle(enum))

        Done(element) ->
          (element, cycle(enum))
      end

      case element
        Enum.None ->
          case next_stream
            Stream s -> s()
          end

        e -> (e, next_stream)
      end
    }
  end

  fn map<T, U>(enum: Enumerable<T>, f: T -> U) -> Stream<U>
    Stream {
      case lazy(enum)()
        Done -> Done
        (element, next_stream) -> (f(element), map(next_stream, f))
      end
    }
  end

  fn each<E>(enum: Enumerable<E>, f: E -> Anything) -> Stream<E>
    map(enum) { x -> f(x); x }
  end

  fn lazy<E>(stream: Stream<E>) -> Stream<E>; stream end

  fn lazy<E>(enum: Enumerable<E>) -> Stream<E>
    case Enumerable.reduce(enum, Enum.Step.Suspend(Enum.None)) { acc, x -> Enum.Step.Suspend(x) }
      Suspended(_, continuation) -> _lazy(continuation)
      _ -> panic!("Expected a continuation")
    end
  end

  fn _lazy<E>(continuation: Enum.Step<E | Enum.None> -> Enum.Outcome<E | Enum.None>) -> Stream<E>
    Stream {
      case continuation(Enum.Step.Continue(Enum.None))
        Suspended(element, next_continuation) ->
          case element
            Enum.None -> Done
            e         -> (e, _lazy(next_continuation))
          end

        Halted _ -> Done
        Done _   -> Done
      end
    }
  end

  fn concat<T, U>(enum1: Enumerable<T>, enum2: Enumerable<U>) -> Stream<T | U>
    concat([enum1, enum2])
  end

  fn concat<T, E: Enumerable<T>>(enums: Enumerable<E>) -> Stream<T>
    Stream {
      case lazy(enums)()
        Done -> Done
        (inner_enum, next_stream) -> _concat_each(lazy(inner_enum), next_stream)()
      end
    }
  end

  fn _concat_each<T, E: Enumerable<T>>(inner_stream: Stream<T>, outer_stream: Stream<E>) -> Stream<T>
    Stream {
      case inner_stream()
        Done -> concat(outer_stream)()
        (element, next_stream) -> (element, _concat_each(next_stream, outer_stream))
      end
    }
  end

  fn concat_map<T, U>(enum: Enumerable<T>, f: T -> Enumerable<U>) -> Stream<U>
    enum
      |> map(f)
      |> concat
  end

  fn filter<E>(enum: Enumerable<E>, f: E -> Bool) -> Stream<E>
    Stream {
      case lazy(enum)()
        Done -> Done

        (element, next_stream) ->
          if f(element)
            (element, filter(next_stream, f))
          else
            filter(next_stream, f)()
          end
      end
    }
  end

  fn repeat<E>(f: () -> E) -> Stream<E>
    Stream { (f(), repeat(f)) }
  end

  fn interval(n: Number) -> Stream<Int>
    unfold(1) { i ->
      `sleep(@n)`: Int
      (i, i + 1)
    }
  end
end

impl <E> Enumerable<E> for Stream<E>
  fn reduce<R>(stream: Stream<E>, accumulator: Enum.Step<R>, f: (R, E) -> Enum.Step<R>) -> Enum.Outcome<R>
    case accumulator
      Halt(acc) ->
        Enum.Outcome.Halted(acc)

      Suspend(acc) ->
        Enum.Outcome.Suspended(acc) { (acc: Enum.Step<R>) -> reduce(stream, acc, f) }

      Continue(acc) ->
        case stream
          Stream s ->
            case s()
              Stream.Done          -> Enum.Outcome.Done(acc)
              (value, next_stream) -> reduce(next_stream, f(acc, value), f)
            end
        end
    end
  end
end
