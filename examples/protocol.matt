module ReduceResult
  type Done<T> = T
  type Halted<T> = T
end

typealias ReduceResult<T> = ReduceResult.Done<T> | ReduceResult.Halted<T>

module ReduceStep
  type Continue<T> = T
  type Halt<T> = T
end

typealias ReduceStep<T> = ReduceStep.Continue<T> | ReduceStep.Halt<T>

protocol Enumerable<Element>
  fn reduce<Result>(enum: Enumerable<Element>, acc: ReduceStep<Result>, f: (Result, Element) -> ReduceStep<Result>) -> ReduceResult<Result>
end

impl <E> Enumerable<E> for List<E>
  fn reduce<R>(list: List<E>, accumulator: ReduceStep<R>, f: (R, E) -> ReduceStep<R>) -> ReduceResult<R>
    case accumulator
      Halt(acc) ->
        ReduceResult.Halted(acc)

      Continue(acc) ->
        case list
          head :: tail -> reduce(tail, f(acc, head), f)
          []           -> ReduceResult.Done(acc)
        end
    end
  end
end

type Hash<Key, Value> = [(Key, Value)]

impl <K, V> Enumerable<(K, V)> for Hash<K, V>
  fn reduce<R>(hash: Hash<K, V>, accumulator: ReduceStep<R>, f: (R, (K, V)) -> ReduceStep<R>) -> ReduceResult<R>
    case accumulator
      Halt(acc) ->
        ReduceResult.Halted(acc)

      Continue(acc) ->
        case hash
          Hash(head :: tail) -> reduce(Hash(tail), f(acc, head), f)
          Hash([])           -> ReduceResult.Done(acc)
        end
    end
  end
end

module Enum
  fn reduce<E, R>(enum: Enumerable<E>, acc: R, f: (R, E) -> R) -> R
    case Enumerable.reduce(enum, ReduceStep.Continue(acc)) { acc, x -> ReduceStep.Continue(f(acc, x)) }
      Halted(result) -> result
      Done(result)   -> result
    end
  end

  fn map<E, M>(enum: Enumerable<E>, f: E -> M) -> [M]
    reduce(enum, []) { acc, x -> f(x) :: acc } |> List.reverse
  end
end

# ----

module Comparison
  type Larger
  type Smaller
  type Equal
end

typealias Comparison = Comparison.Larger | Comparison.Smaller | Comparison.Equal

protocol ComparableWith<T>
  fn compare(a: ComparableWith<T>, b: T) -> Comparison
end

impl ComparableWith<Number> for Number
  fn compare(a: Number, b: Number) -> Comparison
    diff = a - b

    if diff < 0
      Comparison.Smaller
    elsif diff > 0
      Comparison.Larger
    else
      Comparison.Equal
    end
  end
end

# ----

protocol Printable
  fn to_string(p: Printable) -> String
end

impl Printable for Number
  fn to_string(n: Number) -> String
    `@n.value.to_s`: String
  end
end

fn foo(x: Printable & ComparableWith<Number>) -> String
  case ComparableWith.compare(x, 0)
    Comparison.Smaller -> "less than 0"
    _ -> Printable.to_string(x)
  end
end
