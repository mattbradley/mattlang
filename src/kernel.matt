infix right 1 ||
infix right 2 &&
infix left  3 ==
infix left  3 !=
infix left  3 <
infix left  3 >
infix left  3 <=
infix left  3 >=
infix right 4 ::
infix left  5 +
infix left  5 -
infix left  6 *
infix left  6 /
infix left  6 %
infix right 7 **
infix left  8 ..

fn !(x: Bool) -> Bool
  `!@x`: Bool
end

fn -(x: Int) -> Int
  `-@x`: Int
end

fn -(x: Float) -> Float
  `-@x`: Float
end

fn +(x: Int) -> Int
  `+@x`: Int
end

fn +(x: Float) -> Float
  `+@x`: Float
end

fn +(a: Int, b: Int) -> Int
  `@a + @b`: Int
end

fn +(a: Float, b: Int) -> Float
  `@a + @b`: Float
end

fn +(a: Int | Float, b: Float) -> Float
  `@a + @b`: Float
end

fn -(a: Int, b: Int) -> Int
  `@a - @b`: Int
end

fn -(a: Float, b: Int) -> Float
  `@a - @b`: Float
end

fn -(a: Int | Float, b: Float) -> Float
  `@a - @b`: Float
end

fn *(a: Int, b: Int) -> Int
  `@a * @b`: Int
end

fn *(a: Float, b: Int) -> Float
  `@a * @b`: Float
end

fn *(a: Int | Float, b: Float) -> Float
  `@a * @b`: Float
end

fn /(a: Int | Float, b: Int | Float) -> Float
  `@a.to_f / @b`: Float
end

fn %(a: Int, b: Int) -> Int
  `@a % @b`: Int
end

fn %(a: Float, b: Int) -> Float
  `@a % @b`: Float
end

fn %(a: Int | Float, b: Float) -> Float
  `@a % @b`: Float
end

fn **(a: Int, b: Int) -> Int
  `@a ** @b`: Int
end

fn **(a: Float, b: Int) -> Float
  `@a ** @b`: Float
end

fn **(a: Int | Float, b: Float) -> Float
  `@a ** @b`: Float
end

fn ||(a: Bool, b: Bool) -> Bool
  `@a || @b`: Bool
end

fn &&(a: Bool, b: Bool) -> Bool
  `@a && @b`: Bool
end

fn ==(a: Int | Float, b: Int | Float) -> Bool
  `@a == @b`: Bool
end

fn ==(a: String, b: String) -> Bool
  `@a == @b`: Bool
end

fn !=(a: Int | Float, b: Int | Float) -> Bool
  !(a == b)
end

fn !=(a: String, b: String) -> Bool
  !(a == b)
end

fn <(a: Int | Float, b: Int | Float) -> Bool
  `@a < @b`: Bool
end

fn <(a: String, b: String) -> Bool
  `@a < @b`: Bool
end

fn >(a: Int | Float, b: Int | Float) -> Bool
  `@a > @b`: Bool
end

fn >(a: String, b: String) -> Bool
  `@a > @b`: Bool
end

fn <=(a: Int | Float, b: Int | Float) -> Bool
  `@a <= @b`: Bool
end

fn <=(a: String, b: String) -> Bool
  `@a <= @b`: Bool
end

fn >=(a: Int | Float, b: Int | Float) -> Bool
  `@a >= @b`: Bool
end

fn >=(a: String, b: String) -> Bool
  `@a >= @b`: Bool
end

module IO
  fn print(value: Int | Float | Nil | Bool | String) -> Nil
    `print(@value.value.to_s)`: Nil
  end

  fn puts(value: Int | Float | Nil | Bool | String) -> Nil
    `puts(@value.value.to_s)`: Nil
  end
end

fn :: <T>(element: T, list: EmptyList) -> List<T>
  `[@element]`: List<T>
end

fn :: <T, U>(element: T, list: List<U>) -> List<T | U>
  `[@element] + @list`: List<T | U>
end

fn head<T>(list: List<T>) -> T
  `@list.first`: T
end

fn tail<T>(list: List<T>) -> List<T> | EmptyList
  `
    v = @list[1..-1]
    cast(v, v.empty? ? 'EmptyList' : 'List<T>')
  `: List<T> | EmptyList
end

module List
  fn is_empty(list: EmptyList) -> Bool; true end
  fn is_empty<T>(list: List<T>) -> Bool; false end

  fn reduce<T, F>(list: EmptyList, acc: T, f: F) -> T
    acc
  end

  fn reduce<T, U, V>(list: List<T>, acc: U, f: (T, U | V) -> V) -> V
    h = head(list)
    t = tail(list)

    acc = f(h, acc)
    reduce(t, acc, f)
  end

  fn map<F>(list: EmptyList, f: F) -> EmptyList
    list
  end

  fn map<T, U>(list: List<T>, f: T -> U) -> List<U>
    reverse(reduce(list, [], { (x: T, acc: List<U> | EmptyList) -> f(x) :: acc }))
  end

  fn reverse(list: EmptyList) -> EmptyList; list end

  fn reverse<T>(list: List<T>) -> List<T>
    reverse(list, [])
  end

  fn reverse(list: EmptyList, tail: EmptyList) -> EmptyList; tail end
  fn reverse<T>(list: EmptyList, tail: List<T>) -> List<T>; tail end
  fn reverse<T>(list: List<T>, tail: EmptyList) -> List<T>
    reverse(tail(list), head(list) :: tail)
  end
  fn reverse<T, U>(list: List<T>, tail: List<U>) -> List<T | U>
    reverse(tail(list), head(list) :: tail)
  end
end
