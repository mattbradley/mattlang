infix left  9 ..

type Range = { first: Int, last: Int }

fn ..(first: Int, last: Int) -> Range
  Range{first: first, last: last}
end

impl Enumerable<Int> for Range
  fn reduce<R>(range: Range, accumulator: Enum.Step<R>, f: (R, Int) -> Enum.Step<R>) -> Enum.Outcome<R>
    by = if range.first <= range.last; +1 else -1 end
    Range._reduce(range, accumulator, by, f)
  end
end

module Range
  fn _reduce<R>(range: Range, accumulator: Enum.Step<R>, by: Int, f: (R, Int) -> Enum.Step<R>) -> Enum.Outcome<R>
    case accumulator
      Halt(acc) ->
        Enum.Outcome.Halted(acc)

      Continue(acc) ->
        if by > 0 && range.first > range.last || by < 0 && range.first < range.last
          Enum.Outcome.Done(acc)
        else
          _reduce(Range{first: range.first + by, last: range.last}, f(acc, range.first), by, f)
        end
    end
  end
end
