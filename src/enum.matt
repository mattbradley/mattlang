protocol Enumerable<Element>
  fn reduce<Result>(enum: Enumerable<Element>, acc: Enum.Step<Result>, f: (Result, Element) -> Enum.Step<Result>) -> Enum.Outcome<Result>
end

module Enum
  module Outcome
    type Done<T> = T
    type Halted<T> = T
    type Suspended<T> = (T, Step<T> -> Outcome<T>)
  end

  typealias Outcome<T> = Outcome.Done<T> | Outcome.Halted<T> | Outcome.Suspended<T>

  module Step
    type Continue<T> = T
    type Halt<T> = T
    type Suspend<T> = T
  end

  typealias Step<T> = Step.Continue<T> | Step.Halt<T> | Step.Suspend<T>

  type None

  fn reduce<E>(enum: Enumerable<E>, f: (E, E) -> E) -> E | Nil
    result =
      reduce(enum, None) { (acc: E | None, x: E) ->
        case acc
          None -> x
          a    -> f(a, x)
        end
      }

    case result
      None -> nil
      r    -> r
    end
  end

  fn reduce<E, R>(enum: Enumerable<E>, acc: R, f: (R, E) -> R) -> R
    case Enumerable.reduce(enum, Step.Continue(acc)) { acc, x -> Step.Continue(f(acc, x)) }
      Suspended(result, _) -> result
      result               -> result
    end
  end

  fn reduce_right<E, R>(enum: Enumerable<E>, acc: R, f: (E, R) -> R) -> R
    enum
      |> reverse
      |> reduce(acc) { a, x -> f(x, a) }
  end

  fn to_list<E>(list: [E]) -> [E]
    list
  end

  fn to_list<E>(enum: Enumerable<E>) -> [E]
    enum |> reverse |> reverse
  end

  fn count<E>(enum: Enumerable<E>) -> Int
    reduce(enum, 0) { count, _ -> count + 1 }
  end

  fn map<E, M>(enum: Enumerable<E>, f: E -> M) -> [M]
    reduce(enum, []) { acc, x -> f(x) :: acc } |> reverse
  end

  fn each<E>(enum: Enumerable<E>, f: E -> Anything) -> Enumerable<E>
    reduce(enum, nil) { _, x -> f(x); nil }
    enum
  end

  fn reverse<E>(enum: Enumerable<E>) -> [E]
    reduce(enum, []) { tail, head -> head :: tail }
  end

  fn filter<E>(enum: Enumerable<E>, f: E -> Bool) -> [E]
    reduce(enum, []) { acc, x ->
      if f(x)
        x :: acc
      else
        acc
      end
    } |> reverse
  end

  fn sort<T: Comparable<T>>(enum: Enumerable<T>) -> [T]
    case split(enum)
      (l1, []) -> l1
      ([], l2) -> l2
      (l1, l2) -> _merge(sort(l1), sort(l2))
    end
  end

  fn split<T>(enum: Enumerable<T>) -> ([T], [T])
    enum |> reduce(([], [])) { acc, x ->
      (l1, l2) = acc
      (x :: l2, l1)
    }
  end

  fn _merge<T: Comparable<T>>(list1 : [T], list2: [T]) -> [T]
    case (list1, list2)
      (l1, []) -> l1
      ([], l2) -> l2
      (x :: xs, y :: ys) ->
        if x < y
          x :: _merge(xs, list2)
        elsif x > y
          y :: _merge(list1, ys)
        else
          x :: y :: _merge(xs, ys)
        end
    end
  end

  fn at<T>(enum: Enumerable<T>, index: Int) -> T | Nil
    at(enum, index, nil)
  end

  fn at<T, D>(enum: Enumerable<T>, index: Int, default: D) -> T | D
    result =
      Enumerable.reduce(enum, Enum.Step.Continue(0, default)) { acc, x ->
        if acc.0 == index
          Enum.Step.Halt(acc.0, x)
        else
          Enum.Step.Continue(acc.0 + 1, default)
        end
      }

    case result
      Halted(_, res) -> res
      _              -> default
    end
  end

  fn take<T>(enum: Enumerable<T>, count: Int) -> [T]
    result = Enumerable.reduce(enum, Enum.Step.Continue([], count)) { acc, x ->
      case acc
        (_, 0)    -> Enum.Step.Halt(acc)
        (list, 1) -> Enum.Step.Halt(x :: list, 0)
        (list, n) -> Enum.Step.Continue(x :: list, n - 1)
      end
    }

    taken = case result
      Suspended((taken, _), _) -> taken
      Halted(taken, _)         -> taken
      Done(taken, _)           -> taken
    end

    Enum.reverse(taken)
  end

  fn drop<T>(enum: Enumerable<T>, count: Int) -> [T]
    (dropped, _) = reduce(enum, ([], count)) { acc, x ->
      case acc
        (list, 0) -> (x :: list, 0)
        (list, n) -> (list, n - 1)
      end
    }

    Enum.reverse(dropped)
  end

  fn sum(enum: Enumerable<Number>) -> Number
    reduce(enum, 0) { acc, x -> acc + x }
  end

  fn max<T: Comparable<T>>(enum: Enumerable<T>) -> T | Nil
    reduce(enum) { acc, x -> max(acc, x) }
  end

  fn min<T: Comparable<T>>(enum: Enumerable<T>) -> T | Nil
    reduce(enum) { acc, x -> min(acc, x) }
  end

  fn concat<T, U>(enum1: Enumerable<T>, enum2: Enumerable<U>) -> [T | U]
    concat([enum1, enum2])
  end

  fn concat<T, E: Enumerable<T>>(enums: Enumerable<E>) -> [T]
    reduce(enums, []) { outer_acc, enum ->
      reduce(enum, outer_acc) { list, x -> x :: list }
    } |> reverse
  end

  fn concat_map<T, U>(enum: Enumerable<T>, f: T -> Enumerable<U>) -> Enumerable<U>
    enum
      |> map(f)
      |> concat
  end
end
