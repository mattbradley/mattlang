grammar : top_expr_list;

top_expr_list : # none
              | top_expr
              | top_expr terminator top_expr_list
              ;

top_expr : expr
         | fn_def
         | infix_def
         | module_def
         | type_def
         | typealias_def
         ;

expr_list : # none
          | expr
          | expr terminator expr_list
          ;

terminator : SEMICOLON terminator
           | SEMICOLON
           | newline
           ;

expr      : expr_atom
          | expr_atom binary_op expr_atom
          ;

expr_atom : LPAREN RPAREN # Empty tuple -> nil
          | LPAREN tuple_elements RPAREN
          | LBRACE record_elements RBRACE
          | unary_op expr_atom
          | literal
          | fn_call
          | identifier
          ;

tuple_elements : expr
               | expr COMMA tuple_elements
               ;

record_elements : record_element
                | record_element COMMA record_elements
                ;

record_element: identifer COLON expr;

fn_call : fn_name LPAREN tuple_elements RPAREN
        | fn_name LPAREN RPAREN
        | fn_name tuple_elements
        ;

fn_name : identifier
        | binary_op
        ;

fn_def             : 'fn' fn_def_signature terminator expr_list 'end';
fn_def_signature   : fn_name (LANGLE fn_def_type_params RANGLE)? LPAREN (fn_def_args)? RPAREN '->' type_annotation;
fn_def_type_params : identifier
                   | identifier COMMA fn_def_type_params
                   ;
fn_def_args        : fn_def_arg
                   | fn_def_arg COMMA fn_def_args
                   ;
fn_def_arg         : identifier COLON type_annotation (EQUAL expr)?;

infix_def : 'infix' ('left' | 'right')? ([0-9])? binary_op;

module_def : 'module' identifier terminator top_expr_list 'end';

type_def      : 'type' identifier (LANGLE fn_def_type_params RANGLE)? EQUAL type_annotation;
typealias_def : 'typealias' identifier (LANGLE fn_def_type_params RANGLE)? EQUAL type_annotation;

literal : nil_literal
        | bool_literal
        | int_literal
        | float_literal
        | string_literal
        | list_literal
        | lambda_literal
        ;

nil_literal    : 'nil';
bool_literal   : 'true' | 'false';
int_literal    : [0-9_]+;
float_literal  : [0-9_]+'.'[0-9_]+;
string_literal : '"'[^"]*'"';

list_literal   : LBRACKET RBRACKET
               | LBRACKET list_elements RBRACKET
               ;

list_elements  : expr
               | expr COMMA list_elements
               ;

lambda_literal : LBRACE LPAREN (fn_def_args)? RPAREN '->' expr_list RBRACE
               | LBRACE lambda_ags '->' expr_list RBRACE
               | LBRACE expr_list RBRACE
               ;

lambda_args    : identifier
               | identifier COMMA lambda_args
               ;

identifier : [a-zA-Z_][a-zA-Z0-9_]*;

type_annotation  : type_union
                 | type_union '->' type_annotation # Lambda type
                 ;

type_union       : type_atom
                 | type_atom PIPE type_union # Union type
                 ;

type_atom        : identifier
                 | identifier LANGLE type_parameters RANGLE # Generic type
                 | LPAREN type_parameters RPAREN # Possibly zero or more lambda type args, or a single parenthetical type
                 ;

type_parameters  : type_annotation
                 | type_annotation COMMA type_parameters
                 ;

LPAREN    : '('
RPAREN    : ')'
LBRACKET  : '['
RBRACKET  : ']'
LBRACE    : '{'
RBRACE    : '}'
SEMICOLON : ';'
COLON     : ':'
COMMA     : ','
EQAUL     : '='
PIPE      : '|'
LANGLE    : '<'
RANGLE    : '>'
