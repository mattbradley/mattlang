grammar : top_expr_list;

top_expr_list : # none
              | top_expr
              | top_expr terminator top_expr_list
              ;

top_expr : expr
         | fn_def
         | infix_def
         ;

expr_list : # none
          | expr
          | expr terminator expr_list
          ;

terminator : SEMICOLON terminator
           | SEMICOLON
           | newline
           ;

expr      : expr_atom
          | expr_atom binary_op expr_atom
          ;

expr_atom : LPAREN RPAREN
          | LPAREN expr RPAREN
          | unary_op expr_atom
          | literal
          | fn_call
          | identifier
          ;

fn_call : fn_name LPAREN fn_args RPAREN
        | fn_name LPAREN RPAREN
        | fn_name fn_args
        ;

fn_name : identifier
        | binary_op
        ;

fn_args : expr
        | expr COMMA fn_args
        ;

fn_def             : 'fn' fn_def_signature terminator expr_list 'end'
fn_def_signature   : fn_name (LANGLE fn_def_type_params RANGLE)? LPAREN fn_def_args RPAREN '->' type_annotation;
fn_def_type_params : identifier
                   | identifier COMMA fn_def_type_params
                   ;
fn_def_args        : fn_def_arg
                   | fn_def_arg COMMA fn_def_args
                   ;
fn_def_arg         : identifier COLON type_annotation (EQUAL expr)?;

infix_def : 'infix' ('left' | 'right')? ([0-9])? binary_op;

literal : nil_literal
        | bool_literal
        | int_literal
        | float_literal
        | string_literal
        | list_literal
        ;

nil_literal    : 'nil';
bool_literal   : 'true' | 'false';
int_literal    : [0-9_]+;
float_literal  : [0-9_]+'.'[0-9_]+;

string_literal : '"'[^"]*'"';

list_literal   : LBRACKET RBRACKET
               | LBRACKET list_elements RBRACKET
               ;

list_elements  : expr
               | expr COMMA list_elements
               ;

identifier     : [a-zA-Z_][a-zA-Z0-9_]*;

type_annotation : type_atom
                | type_atom PIPE type_annotation # Union type
                ;

type_atom       : identifier
                | identifier LANGLE type_parameters RANGLE # Generic type
                ;

type_parameters : type_annotation
                | type_annotation COMMA type_parameters
                ;

LPAREN    : '('
RPAREN    : ')'
LBRACKET  : '['
RBRACKET  : ']'
SEMICOLON : ';'
COLON     : ':'
COMMA     : ','
EQAUL     : '='
PIPE      : '|'
LANGLE    : '<'
RANGLE    : '>'
